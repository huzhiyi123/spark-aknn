topkPartitionNum cmp 1
type(tmp),tmp[0:100],tmp.shape <class 'numpy.ndarray'> [[20]
 [13]
 [13]
 [13]
 [28]] (1000000, 1) (1000000, 3)
centroids1 (8, 128)
centroids2 (40, 128)
40
print(curdf[0]),curdf.shape (50000,) <class 'pandas.core.series.Series'>
start query
result.count() 10000
end query
l 10000 k 10
recall = cnt/float(l*k) 57551   l 10000 k 10
recall: 0.57551
totalconstructtime 244475.0714302063 kmeanspartitiontime 10333.135843276978 localindexconstructtime 232444.58174705505 globalindexconstructtime 1697.3538398742676
totalsearchtime 19930.397272109985 localsearchtime 19816.536903381348 globalsearchtime 113.8603687286377
hello world testdoublekmeansHnsw

topkPartitionNum cmp 2
type(tmp),tmp[0:100],tmp.shape <class 'numpy.ndarray'> [[20]
 [13]
 [13]
 [13]
 [28]] (1000000, 1) (1000000, 3)
centroids1 (8, 128)
centroids2 (40, 128)
40
print(curdf[0]),curdf.shape (50000,) <class 'pandas.core.series.Series'>
start query
result.count() 10000
end query
l 10000 k 10
recall = cnt/float(l*k) 85400   l 10000 k 10
recall: 0.854
totalconstructtime 239502.15363502502 kmeanspartitiontime 9790.619134902954 localindexconstructtime 228005.7921409607 globalindexconstructtime 1705.742359161377
totalsearchtime 20740.634441375732 localsearchtime 20633.754014968872 globalsearchtime 106.88042640686035
hello world testdoublekmeansHnsw

topkPartitionNum cmp 3
type(tmp),tmp[0:100],tmp.shape <class 'numpy.ndarray'> [[20]
 [13]
 [13]
 [13]
 [28]] (1000000, 1) (1000000, 3)
centroids1 (8, 128)
centroids2 (40, 128)
40
print(curdf[0]),curdf.shape (50000,) <class 'pandas.core.series.Series'>
start query
result.count() 10000
end query
l 10000 k 10
recall = cnt/float(l*k) 97431   l 10000 k 10
recall: 0.97431
totalconstructtime 243134.40537452698 kmeanspartitiontime 10859.668016433716 localindexconstructtime 230463.95015716553 globalindexconstructtime 1810.7872009277344
totalsearchtime 24630.70845603943 localsearchtime 24524.070262908936 globalsearchtime 106.63819313049316
hello world testdoublekmeansHnsw

topkPartitionNum cmp 4
type(tmp),tmp[0:100],tmp.shape <class 'numpy.ndarray'> [[20]
 [13]
 [13]
 [13]
 [28]] (1000000, 1) (1000000, 3)
centroids1 (8, 128)
centroids2 (40, 128)
40
print(curdf[0]),curdf.shape (50000,) <class 'pandas.core.series.Series'>
start query
maxelement = 100000000
k=10
partitionnum=8
topkPartitionNum=3

sc = 1
m = int(50)
distanceFunction='cosine'
kmeanstrainrate=0.05

efConstruction=35
ef = int(4*22)
usesift=True

kmeanspath="/aknn/kmeans/"

gistlist=["gistpartition.csv","gistcentroids2.csv","gistcentroids1.csv"]  
siftlist=["siftpartition.csv","siftcentroids1.csv","siftcentroids2.csv"]

"""
datapath="/my/siftsmall/"
traindatapath=datapath+"siftsmall_base.fvecs"
querydatapath=datapath+"siftsmall_query.fvecs"
querygroundtruthpath=datapath+"siftsmall_groundtruth.ivecs"
"""
datapath="/data/"
traindatapath=datapath+"sift_base.fvecs"
querydatapath=datapath+"sift_query.fvecs"
querygroundtruthpath=datapath+"sift_groundtruth.ivecs"


gistpath="/data/mnist.hdf5"
# ef=10, efConstruction=200


def initparams():
    global maxelement,k,partitionnum,topkPartitionNum,ef,m,distanceFunction,kmeanstrainraten,efConstruction,usesift
    maxelement = 100000000
    k=10
    partitionnum=8
    topkPartitionNum=3
    sc = 1
    m = int(50)
    distanceFunction='cosine'
    kmeanstrainrate=0.05
    efConstruction=100
    ef = efConstruction
    usesift=Truerecall = cnt/float(l*k) 57551   l 10000 k 10
recall: 0.57551
recall = cnt/float(l*k) 85400   l 10000 k 10
recall: 0.854
recall = cnt/float(l*k) 97431   l 10000 k 10
recall: 0.97431

