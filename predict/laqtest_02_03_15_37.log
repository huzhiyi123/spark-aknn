Traceback (most recent call last):
  File "/aknn/main/main.py", line 35, in <module>
    from utils import *
ImportError: No module named 'utils'
datapath="/my/siftsmall/"
traindatapath=datapath+"siftsmall_base.fvecs"
querydatapath=datapath+"siftsmall_query.fvecs"
querygroundtruthpath=datapath+"siftsmall_groundtruth.ivecs"


maxelement = 100000000
k=10
partitionnum=8
topkPartitionNum=3

sc = 1
m = int(50)
distanceFunction='cosine'
kmeanstrainrate=0.05

efConstruction=35
ef = int(4*22)
usesift=True

kmeanspath="/aknn/kmeans/"

gistlist=["gistpartition.csv","gistcentroids2.csv","gistcentroids1.csv"]  
siftlist=["siftpartition.csv","siftcentroids1.csv","siftcentroids2.csv"]
dimensionality=128


"""
datapath="/data/"
traindatapath=datapath+"sift_base.fvecs"
querydatapath=datapath+"sift_query.fvecs"
querygroundtruthpath=datapath+"sift_groundtruth.ivecs"
"""

gistpath="/data/mnist.hdf5"
# ef=10, efConstruction=200


def initparams():
    global maxelement,k,partitionnum,topkPartitionNum,ef,\
        m,distanceFunction,kmeanstrainrate,efConstruction,usesift,dimensionality
    maxelement = 100000000
    k=10
    partitionnum=8
    topkPartitionNum=3
    sc = 1
    m = int(50)
    distanceFunction='cosine'
    kmeanstrainrate=0.05
    efConstruction=100
    ef = efConstruction
    usesift=True
    dimensionality=128Traceback (most recent call last):
  File "/aknn/main/main.py", line 36, in <module>
    from utils import *
ImportError: No module named 'utils'
datapath="/my/siftsmall/"
traindatapath=datapath+"siftsmall_base.fvecs"
querydatapath=datapath+"siftsmall_query.fvecs"
querygroundtruthpath=datapath+"siftsmall_groundtruth.ivecs"


maxelement = 100000000
k=10
partitionnum=8
topkPartitionNum=3

sc = 1
m = int(50)
distanceFunction='cosine'
kmeanstrainrate=0.05

efConstruction=35
ef = int(4*22)
usesift=True

kmeanspath="/aknn/kmeans/"

gistlist=["gistpartition.csv","gistcentroids2.csv","gistcentroids1.csv"]  
siftlist=["siftpartition.csv","siftcentroids1.csv","siftcentroids2.csv"]
dimensionality=128


"""
datapath="/data/"
traindatapath=datapath+"sift_base.fvecs"
querydatapath=datapath+"sift_query.fvecs"
querygroundtruthpath=datapath+"sift_groundtruth.ivecs"
"""

gistpath="/data/mnist.hdf5"
# ef=10, efConstruction=200


def initparams():
    global maxelement,k,partitionnum,topkPartitionNum,ef,\
        m,distanceFunction,kmeanstrainrate,efConstruction,usesift,dimensionality
    maxelement = 100000000
    k=10
    partitionnum=8
    topkPartitionNum=3
    sc = 1
    m = int(50)
    distanceFunction='cosine'
    kmeanstrainrate=0.05
    efConstruction=100
    ef = efConstruction
    usesift=True
    dimensionality=128maxelement,k,partitionnum,topkPartitionNum,ef,m,distanceFunction,kmeanstrainrate,efConstruction,usesift
 100000000 10 8 3 88 50 cosine 0.05 35 True
(traindata.shape) (10000, 128)
print(curdf[0]),curdf.shape (500,) <class 'pandas.core.series.Series'>
start query
result.count() 100
end query
predict
[[2176 3752  882 4009 2837  190 3615  816 1045 1884]
 [2781 9574 2492 1038  925 2183  145 4097 9520 9576]
 [2707 9938 2698 6995 6801 8906 5232 6162 5199 6406]
 [9843 9825 9574 9582 4097 9576 9581  272 9575  107]
 [5164 4559 3492 5353 7604  917 5208 3574 5758 4724]
 [1097 1239 4943 3227  804 2607 4060 4443 4246 3112]
 [2456 3013 1682 8581 2774  924 9701 1916 3687 1036]
 [5447 5868 3109 5671 4597 7586 2804 9394 2735 6639]
 [9628 3382 1098 8518 3600  549 4304 1562 3018  765]
 [7123 7849 1046 7182 4559 5164 7804 4476 4672 5758]
 [1218  645  693  804  496 6946 4060 8027 2960  249]
 [4697 4762 8566 4726 6489 1359 4640 1526 9095 4739]
 [2113  130  506 9692  128 1362 9581  120  483 1834]
 [3609 9815 9574 1564 9663  924 1531 9602 9860 5623]
 [ 797  714   69 1019 1881  906 2771 4151 7744 3239]
 [ 409 3325    2  394 1419 3660 5740 2220    0 3150]
 [9713 3829 9595 8547 2578  319 1517 1986  470  262]
 [4096 3138 1292 9629 9805  133  107 1370 1151 1323]
 [ 903  872 1791 1638  891 2393 1421  307  142  116]
 [1699 9806 9576  107  144 2176 4007 3137  122  411]
 [7462 7217 7027 6757 9067 9311 6076 9840 4555 8074]
 [4490 4457 9102 4915 8047 9600 5047 4671 9473 4560]
 [4957 4784 5408 5525 5718 4679 4739  105 5085 5652]
 [8335 7905 7123 7849 7817 4724 4476 8145 5208 5758]
 [4554 4623  652 5302 9208 4915 9792 1010  705 5832]
 [5947 6422  153 5529  774 4076 1589 1587 9555  828]
 [9899 6827 4492 4683 4461 8502 1965 4827 5302 4829]
 [6161  904 4215 3086 5448 8051 4656  873 9529 6131]
 [4472 4461 5541 6827 7039 5477 7805 5879 4492 9609]
 [5453 5232 5195 6162 6406 5216 6428 6487 6125 6805]
 [5207 7637 8549 1649 1020 5938 4777 5380  434  116]
 [5559 4995 4962 5330 4870  431  581 2657 5013 1483]
 [6030 6508  153 7720 5579 7023 4573 6484  274 7630]
 [7277 3933 9055 8150 8530 1193  687 9200 8293 2201]
 [7058 8862 6346 5715 5902 3049 1965 4941 8468 6800]
 [5841 5866 6707 5376 1884 3364 4271 1605 8535 2139]
 [5842 5867 4272 8534 5377 2607 3954 3614 2515 9212]
 [2841 3271 6465 7707 3004 6358 8211 1843 8432 2800]
 [5023 5500 5177 6187 5341 1320 3565 2519 5522  220]
 [4677 5074 7002 9841 9721 7218 4692 4107 2891 6883]
 [8307 4867 5214 5163 8409 7024 1420 2221 9796 4614]
 [4643 7391 4564  440  560  859 9344 4771 9169 6614]
 [5224 8105 7135 4390 1464 6867 3911 2460 9920  416]
 [6302 5144 6933 5219 5029 6801  927 8391  765 2070]
 [5428  468 5930 7249  322 8615 5358 5148 7891 6212]
 [8979 5560 6085 4996 4460 1277 8712 2640 6754 5713]
 [5880 9669 8997 8218 8259 9000 7851 5857 1389 9160]
 [5641 3948 6707 2890 1757 5866 1884 5309 5841 3179]
 [5213 5750 5772 5437  976 5228 6578  512 7648 5696]
 [5084 5138 4742  168 4743  113 5596 4827 6827 5165]
 [5653 5012 6627 8060 5110 3846 7994 8339 4995  581]
 [6123 6192 6343 6703 2591 2611 9841 7418 9997 7932]
 [5673 8480 2385 2256 6455 7145 1002 8906 6478 4357]
 [2640 5997 1321   92  221 4711 6679 7909  633 5713]
 [6158 6167 4798 6709 6983 6676 7177 6458 6678 6283]
 [5830 6004 5499 5115 5999 7228 7226 5987 8603 6252]
 [7641 4604 2070 7308 4463 2916 5086 4714 5555  515]
 [5211 5284 5637 7374 9922 9778  448 2650 8809 1626]
 [7237 7024 7700 9958 3804 8551   33 1864  971 4867]
 [6834 6316 6612 6648 7171 6376 6692 6798 6720 8674]
 [5278 4472 4490 4457 6930 4461 9547 9524 5879 7308]
 [8402 8564 6354 8906 1890 9938 2481 3816 2621 4914]
 [6560 7269 6911 6202 6268 6898 6371 7675 6248 7963]
 [6321 6413 5989 7094 6440 5863 5167 7167 5327 5310]
 [5635 5440 6937 9058 7082 5545 6905 7004 7960 9314]
 [6405 5504 6022 6712  798 9224 4579 7600 5658 8201]
 [5390 5669 7346 7758 5242 7159 7338 3264 7082 5464]
 [6857 8162 7881 8279 6638 6018 5743 9033 7536 4649]
 [1478 5199 9893 5073  603 9845 7217 7462 8051 4225]
 [5877 3049 6214 3368 7058 9719 5902 5715 4511 3541]
 [6124 6430 5912 6804 7486 7765 6163 5196 5454 5487]
 [5826 5885 5155 7157 7081 5634 9057 9297 7133 9121]
 [6609  933 9769 4315 3593 5296 7601 5938 4546  159]
 [6853 4240 2771 3239 3802 7744 1881 2453 1875 3487]
 [7364 5541 9547 2085 8190 9546 9561 9617 9527 9524]
 [7616 1234 6297 8996 5496 4881 9796 8883 5664 7024]
 [7903 7367 2805 1236 3108 2104 3680 1390 8166 9037]
 [8578 8275 9153 8004 2949 9190 5756 1721 6994 7529]
 [9208 9792 4623 9464 1562 4736 4888 7117 8230 5234]
 [6070 8069 5967 8486 7489 7080 5952 7280 6646 7076]
 [7451 7188 7742 7587 6345 9250 7855 7254 4649 9367]
 [3086 6408 4951 5088 3766 1548 6131 5102 4218 5436]
 [9164   51  390   90   64  273 5571 1133 8783  775]
 [6005 6778 8480 1478 7943 8047 6382 5288 8890 4672]
 [2467 9464 5121 5879 3403 1562 9208 6109 9530 6604]
 [8354 8725 6144 7927 7584 7019 5887 6254 4232 6425]
 [9151 5743 6750 6843 5474 5690 6587 7325 9037 8162]
 [7722 5690 8011 6587 8734 6140 7296 7707 5415 9151]
 [7098 6901 8899 7065 9224 8103 6326 6369 8201 5901]
 [7627 7118 6079 6245 5507 7265 2497 6831 9079 5764]
 [5862 4604 5086 4739 6490 9257 4679 4776 4854 5651]
 [8896 9993 3937  763 9240 9085 6453 7924 8197 6269]
 [8356 7797  956  908  580 4832 1567 4684 1059 2956]
 [8978 1088 5433 7218 7463 7167 7344 6785 6137 1661]
 [8419 8099 7678 7486 8608 8492 6804 7411 9267 4053]
 [1185  925 2164 8929 4019 2525 3115 2025 9759 2197]
 [7939 2126 4867 2728 2949 8307  971  195 4614 5731]
 [8825 9081 6142 5072 6234 7467 6926 8102 5134 8471]
 [5460 5439 5810 6882 5773 6906 5924 6745 7419 6047]
 [8082 8782 4767 9163 9942 9993 2894 9240 9338 9846]]
l 100 k 10
recall: 0.848
datapath="/my/siftsmall/"
traindatapath=datapath+"siftsmall_base.fvecs"
querydatapath=datapath+"siftsmall_query.fvecs"
querygroundtruthpath=datapath+"siftsmall_groundtruth.ivecs"


maxelement = 100000000
k=10
partitionnum=8
topkPartitionNum=3

sc = 1
m = int(50)
distanceFunction='cosine'
kmeanstrainrate=0.05

efConstruction=35
ef = int(4*22)
usesift=True

kmeanspath="/aknn/kmeans/"

gistlist=["gistpartition.csv","gistcentroids2.csv","gistcentroids1.csv"]  
siftlist=["siftpartition.csv","siftcentroids1.csv","siftcentroids2.csv"]
dimensionality=128


"""
datapath="/data/"
traindatapath=datapath+"sift_base.fvecs"
querydatapath=datapath+"sift_query.fvecs"
querygroundtruthpath=datapath+"sift_groundtruth.ivecs"
"""

gistpath="/data/mnist.hdf5"
# ef=10, efConstruction=200


def initparams():
    global maxelement,k,partitionnum,topkPartitionNum,ef,\
        m,distanceFunction,kmeanstrainrate,efConstruction,usesift,dimensionality
    maxelement = 100000000
    k=10
    partitionnum=8
    topkPartitionNum=3
    sc = 1
    m = int(50)
    distanceFunction='cosine'
    kmeanstrainrate=0.05
    efConstruction=100
    ef = efConstruction
    usesift=True
    dimensionality=128recall: 0.848
